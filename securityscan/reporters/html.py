"""
HTML report generator for SecurityScan.
"""

import json
from datetime import datetime
from pathlib import Path
from typing import Dict, Any

from ..models import ScanResult, Severity, IssueCategory


class HTMLReporter:
    """HTML report generator."""
    
    def __init__(self, config):
        self.config = config
    
    def generate_report(self, result: ScanResult, output_file: Path):
        """Generate HTML report."""
        html_content = self._generate_html_content(result)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
    
    def _generate_html_content(self, result: ScanResult) -> str:
        """Generate complete HTML content."""
        stats = result.statistics
        
        # Security score styling
        score = stats.security_score
        if score >= 90:
            score_class = "score-excellent"
            score_message = "Excellent! Your code is very secure!"
        elif score >= 70:
            score_class = "score-good"
            score_message = "Good security practices detected."
        elif score >= 50:
            score_class = "score-warning"
            score_message = "Some security improvements needed."
        else:
            score_class = "score-critical"
            score_message = "Critical security issues found!"
        
        html = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SecurityScan Report - {result.project_path.name}</title>
    <style>
        {self._get_css_styles()}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üîí SecurityScan Report</h1>
            <div class="project-info">
                <p><strong>Project:</strong> {result.project_path.name}</p>
                <p><strong>Scan Date:</strong> {result.scan_timestamp.strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p><strong>Scanner Version:</strong> {result.scanner_version}</p>
            </div>
        </header>
        
        <main>
            <!-- Summary Section -->
            <section class="summary">
                <h2>üìä Security Summary</h2>
                <div class="score-container">
                    <div class="score-circle {score_class}">
                        <span class="score-value">{score}</span>
                        <span class="score-label">/ 100</span>
                    </div>
                    <div class="score-message">{score_message}</div>
                </div>
                
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-value">{stats.total_issues}</div>
                        <div class="stat-label">Total Issues</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">{stats.files_scanned}</div>
                        <div class="stat-label">Files Scanned</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">{stats.files_with_issues}</div>
                        <div class="stat-label">Files with Issues</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">{stats.scan_duration:.2f}s</div>
                        <div class="stat-label">Scan Duration</div>
                    </div>
                </div>
            </section>
            
            <!-- Issues by Severity -->
            <section class="severity-breakdown">
                <h2>üîç Issues by Severity</h2>
                <div class="severity-chart">
                    {self._generate_severity_chart(stats)}
                </div>
            </section>
            
            <!-- Issues by Category -->
            <section class="category-breakdown">
                <h2>üìã Issues by Category</h2>
                <div class="category-chart">
                    {self._generate_category_chart(stats)}
                </div>
            </section>
            
            <!-- Detailed Issues -->
            <section class="detailed-issues">
                <h2>üîé Detailed Issues</h2>
                {self._generate_detailed_issues(result)}
            </section>
            
            <!-- Recommendations -->
            <section class="recommendations">
                <h2>üí° Recommendations</h2>
                {self._generate_recommendations(stats)}
            </section>
        </main>
        
        <footer>
            <p>Generated by SecurityScan v{result.scanner_version} on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </footer>
    </div>
    
    <script>
        {self._get_javascript()}
    </script>
</body>
</html>
        """
        
        return html
    
    def _get_css_styles(self) -> str:
        """Get CSS styles for the HTML report."""
        return """
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f8f9fa;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            background: linear-gradient(135deg, #1E40AF 0%, #3B82F6 100%);
            color: white;
            padding: 30px;
            border-radius: 10px;
            margin-bottom: 30px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        header h1 {
            font-size: 2.5rem;
            margin-bottom: 15px;
        }
        
        .project-info {
            display: flex;
            gap: 30px;
            flex-wrap: wrap;
        }
        
        .project-info p {
            margin: 5px 0;
        }
        
        section {
            background: white;
            margin-bottom: 30px;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        h2 {
            color: #1E40AF;
            margin-bottom: 20px;
            font-size: 1.8rem;
        }
        
        .summary {
            text-align: center;
        }
        
        .score-container {
            margin-bottom: 30px;
        }
        
        .score-circle {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            margin: 0 auto 15px;
            font-weight: bold;
        }
        
        .score-excellent {
            background: linear-gradient(135deg, #10B981, #34D399);
            color: white;
        }
        
        .score-good {
            background: linear-gradient(135deg, #059669, #10B981);
            color: white;
        }
        
        .score-warning {
            background: linear-gradient(135deg, #F59E0B, #FBBF24);
            color: white;
        }
        
        .score-critical {
            background: linear-gradient(135deg, #DC2626, #EF4444);
            color: white;
        }
        
        .score-value {
            font-size: 2rem;
            line-height: 1;
        }
        
        .score-label {
            font-size: 1rem;
            opacity: 0.9;
        }
        
        .score-message {
            font-size: 1.2rem;
            font-weight: 500;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }
        
        .stat-card {
            background: #F9FAFB;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            border-left: 4px solid #1E40AF;
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: #1E40AF;
        }
        
        .stat-label {
            color: #6B7280;
            font-size: 0.9rem;
            margin-top: 5px;
        }
        
        .severity-chart, .category-chart {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
        }
        
        .severity-item, .category-item {
            padding: 15px;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .severity-critical {
            background: #FEE2E2;
            border-left: 4px solid #DC2626;
        }
        
        .severity-high {
            background: #FEF3C7;
            border-left: 4px solid #F59E0B;
        }
        
        .severity-medium {
            background: #FEF3C7;
            border-left: 4px solid #F59E0B;
        }
        
        .severity-low {
            background: #DBEAFE;
            border-left: 4px solid #3B82F6;
        }
        
        .severity-info {
            background: #F0FDF4;
            border-left: 4px solid #10B981;
        }
        
        .issue-item {
            border: 1px solid #E5E7EB;
            border-radius: 8px;
            margin-bottom: 20px;
            overflow: hidden;
        }
        
        .issue-header {
            padding: 15px 20px;
            font-weight: bold;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .issue-critical {
            background: #FEE2E2;
            color: #DC2626;
        }
        
        .issue-high {
            background: #FEF3C7;
            color: #F59E0B;
        }
        
        .issue-medium {
            background: #FEF3C7;
            color: #F59E0B;
        }
        
        .issue-low {
            background: #DBEAFE;
            color: #3B82F6;
        }
        
        .issue-info {
            background: #F0FDF4;
            color: #10B981;
        }
        
        .issue-body {
            padding: 20px;
            background: white;
        }
        
        .issue-description {
            margin-bottom: 15px;
            line-height: 1.6;
        }
        
        .issue-location {
            color: #6B7280;
            font-size: 0.9rem;
            margin-bottom: 10px;
        }
        
        .issue-fix {
            background: #F0FDF4;
            padding: 15px;
            border-radius: 6px;
            border-left: 4px solid #10B981;
            margin: 15px 0;
        }
        
        .issue-fix h4 {
            color: #10B981;
            margin-bottom: 8px;
        }
        
        .code-snippet {
            background: #1F2937;
            color: #F9FAFB;
            padding: 15px;
            border-radius: 6px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 0.9rem;
            overflow-x: auto;
            margin: 15px 0;
        }
        
        .recommendations {
            background: #F0FDF4;
            border-left: 4px solid #10B981;
        }
        
        .recommendation-item {
            margin-bottom: 15px;
            padding: 10px 0;
        }
        
        .recommendation-item h4 {
            color: #10B981;
            margin-bottom: 5px;
        }
        
        footer {
            text-align: center;
            padding: 20px;
            color: #6B7280;
            font-size: 0.9rem;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            header h1 {
                font-size: 2rem;
            }
            
            .project-info {
                flex-direction: column;
                gap: 10px;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
        }
        """
    
    def _generate_severity_chart(self, stats) -> str:
        """Generate severity breakdown chart."""
        chart_html = ""
        
        for severity in [Severity.CRITICAL, Severity.HIGH, Severity.MEDIUM, Severity.LOW, Severity.INFO]:
            count = stats.issues_by_severity[severity]
            if count > 0:
                percentage = (count / stats.total_issues) * 100
                emoji = {"critical": "üî¥", "high": "üü†", "medium": "üü°", "low": "üîµ", "info": "üü¢"}
                chart_html += f"""
                <div class="severity-item severity-{severity.value}">
                    <span>{emoji[severity.value]} {severity.value.title()}</span>
                    <span><strong>{count}</strong> ({percentage:.1f}%)</span>
                </div>
                """
        
        return chart_html
    
    def _generate_category_chart(self, stats) -> str:
        """Generate category breakdown chart."""
        chart_html = ""
        
        top_categories = sorted(
            stats.issues_by_category.items(),
            key=lambda x: x[1],
            reverse=True
        )[:10]
        
        for category, count in top_categories:
            if count > 0:
                category_name = category.value.replace('_', ' ').title()
                percentage = (count / stats.total_issues) * 100
                chart_html += f"""
                <div class="category-item">
                    <span>{category_name}</span>
                    <span><strong>{count}</strong> ({percentage:.1f}%)</span>
                </div>
                """
        
        return chart_html
    
    def _generate_detailed_issues(self, result: ScanResult) -> str:
        """Generate detailed issues section."""
        if not result.issues:
            return '<p class="no-issues">üéâ No security issues found!</p>'
        
        issues_html = ""
        
        # Group issues by severity
        issues_by_severity = {}
        for issue in result.issues:
            if issue.severity not in issues_by_severity:
                issues_by_severity[issue.severity] = []
            issues_by_severity[issue.severity].append(issue)
        
        # Generate issues by severity
        for severity in [Severity.CRITICAL, Severity.HIGH, Severity.MEDIUM, Severity.LOW, Severity.INFO]:
            if severity in issues_by_severity:
                issues = issues_by_severity[severity]
                severity_html = f'<h3>{severity.value.title()} Issues ({len(issues)})</h3>'
                
                for issue in issues:
                    severity_html += self._generate_single_issue_html(issue)
                
                issues_html += severity_html
        
        return issues_html
    
    def _generate_single_issue_html(self, issue) -> str:
        """Generate HTML for a single issue."""
        code_snippet_html = ""
        if issue.code_snippet:
            code_snippet_html = f'<div class="code-snippet">{issue.code_snippet}</div>'
        
        fix_html = ""
        if issue.fix_suggestion:
            fix_html = f"""
            <div class="issue-fix">
                <h4>üí° Fix Suggestion</h4>
                <p>{issue.fix_suggestion}</p>
            </div>
            """
        
        references_html = ""
        if issue.references:
            refs_list = "".join([f"<li><a href='{ref}' target='_blank'>{ref}</a></li>" for ref in issue.references[:3]])
            references_html = f"""
            <div class="issue-references">
                <h4>üìö References</h4>
                <ul>{refs_list}</ul>
            </div>
            """
        
        tags_html = ""
        if issue.tags:
            tags_list = " ".join([f"<span class='tag'>#{tag}</span>" for tag in sorted(issue.tags)])
            tags_html = f'<div class="issue-tags">{tags_list}</div>'
        
        return f"""
        <div class="issue-item">
            <div class="issue-header issue-{issue.severity.value}">
                <span>{issue.title}</span>
                <span>{issue.file_path}:{issue.line_number}</span>
            </div>
            <div class="issue-body">
                <div class="issue-location">
                    üìÅ {issue.file_path} (Line {issue.line_number}, Column {issue.column_number})
                </div>
                <div class="issue-description">
                    {issue.description}
                </div>
                {code_snippet_html}
                {fix_html}
                {references_html}
                {tags_html}
            </div>
        </div>
        """
    
    def _generate_recommendations(self, stats) -> str:
        """Generate recommendations section."""
        recommendations = []
        
        if stats.issues_by_severity.get(Severity.CRITICAL, 0) > 0:
            recommendations.append({
                "title": "Fix Critical Issues",
                "description": "Address critical security vulnerabilities immediately as they pose the highest risk."
            })
        
        if stats.issues_by_severity.get(Severity.HIGH, 0) > 0:
            recommendations.append({
                "title": "Address High Severity Issues",
                "description": "Plan to fix high-severity issues soon as they can lead to serious security breaches."
            })
        
        if stats.issues_by_severity.get(Severity.MEDIUM, 0) > 0:
            recommendations.append({
                "title": "Review Medium Severity Issues",
                "description": "Schedule fixes for medium-severity issues in upcoming development cycles."
            })
        
        if stats.issues_by_category.get(IssueCategory.SECRET, 0) > 0:
            recommendations.append({
                "title": "Secure Secret Management",
                "description": "Implement proper secret management using environment variables or secret management services."
            })
        
        if stats.issues_by_category.get(IssueCategory.DEPENDENCY, 0) > 0:
            recommendations.append({
                "title": "Update Dependencies",
                "description": "Keep dependencies up to date and use tools like Dependabot for automated updates."
            })
        
        if not recommendations:
            recommendations.append({
                "title": "Maintain Security Practices",
                "description": "Continue following security best practices and perform regular security scans."
            })
        
        recommendations_html = ""
        for rec in recommendations:
            recommendations_html += f"""
            <div class="recommendation-item">
                <h4>{rec['title']}</h4>
                <p>{rec['description']}</p>
            </div>
            """
        
        return recommendations_html
    
    def _get_javascript(self) -> str:
        """Get JavaScript for interactive features."""
        return """
        // Add any interactive features here
        document.addEventListener('DOMContentLoaded', function() {
            // Example: Add click handlers for issue details
            const issueItems = document.querySelectorAll('.issue-item');
            issueItems.forEach(item => {
                item.addEventListener('click', function() {
                    this.classList.toggle('expanded');
                });
            });
        });
        """
